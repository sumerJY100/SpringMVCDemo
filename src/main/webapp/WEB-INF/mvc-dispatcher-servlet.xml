<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <bean id="jobFactory" class="com.gaussic.quartz3.MyJobFactory"/>
    <!--指明 controller 所在包，并扫描其中的注解-->
    <context:component-scan base-package="com.gaussic.controller"/>
    <context:component-scan base-package="com.gaussic.service"/>
    <context:component-scan base-package="com.gaussic.service.dcs"/>
    <!--<context:component-scan base-package="com.gaussic.quartz" />-->
    <context:component-scan base-package="com.gaussic.dataGet" />

    <context:component-scan base-package="com.gaussic.dataGet.dcsHandle"/>
    <context:component-scan base-package="com.gaussic.dataGet.windPojoHandle"/>
    <context:component-scan base-package="com.gaussic.dataGet.pipeHandle"/>

    <context:component-scan base-package="com.gaussic.quartz3" />

    <!-- 静态资源(js、image等)的访问 -->
    <mvc:default-servlet-handler/>

    <!-- 开启注解 -->
    <mvc:annotation-driven/>

    <!--ViewResolver 视图解析器-->
    <!--用于支持Servlet、JSP视图解析-->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/resources/css/"/>
    <mvc:resources mapping="/js/**" location="/resources/js/"/>
    <mvc:resources mapping="/image/**" location="/resources/image/"/>

    <!-- 表示JPA Repository所在的包 -->
    <jpa:repositories base-package="com.gaussic.repository"/>
    <jpa:repositories base-package="com.gaussic.repository.dcs_history"/>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="defaultPersistenceUnit"/>
        <property name="packagesToScan"
                  value="com.gaussic.model ,com.gaussic.model.history,com.gaussic.model.dcs,com.gaussic.model.dcsRemote,com.gaussic.model.dcs_history"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/wind?useSSL=false</prop>
                <prop key="hibernate.connection.username">root</prop>
                <prop key="hibernate.connection.password">root</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.connection.useUnicode">true</prop>
                <prop key="hibernate.connection.characterEncoding">UTF-8</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.connection.autoReconnect">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="connection.autoReconnectForPools">true</prop>
                <prop key="connection.is-connection-validation-required">true</prop>
                <!--连接池-->
                <prop key="hibernate.c3p0.validate">true</prop>
                <prop key="hibernate.connection.provider_class">
                    org.hibernate.service.jdbc.connections.internal.C3P0ConnectionProvider
                </prop>
                <!--<prop key="hibernate.c3p0.min_size">50</prop>
                <prop key="hibernate.c3p0.max_size">2000</prop>-->
                <prop key="hibernate.c3p0.timeout">1800</prop>
                <prop key="hibernate.c3p0.max_statements">3000</prop>
                <prop key="hibernate.c3p0.preferredTestQuery">SELECT 1;</prop>
                <prop key="hibernate.c3p0.testConnectionOnCheckout">true</prop>
                <prop key="hibernate.c3p0.idle_test_period">3000</prop>


                <!--连接池中保留的最小连接数。-->
                <prop key="minPoolSize">30</prop>
                <!--连接池中保留的最大连接数。Default: 15 -->
                <prop key="maxPoolSize">100</prop>
                <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
                <prop key="initialPoolSize" >50</prop>
                <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
                <prop key="maxIdleTime" >20</prop>
                <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
                <prop key="acquireIncrement" >20</prop>
                <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
               属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
               如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
                <prop key="maxStatements" >0</prop>
                <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
                <prop key="idleConnectionTestPeriod" >60</prop>
                <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
                <prop key="acquireRetryAttempts" >30</prop>
                <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
               保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
               获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
                <prop key="breakAfterAcquireFailure" >false</prop>
                <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
              时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
              等方法来提升连接测试的性能。Default: false -->
                <prop key="testConnectionOnCheckout" >false</prop>
            </props>
        </property>
    </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 开启事务管理注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <mvc:interceptors>
        <!--<bean class="org.springframework.orm.hibernate5.support.OpenSessionInViewInterceptor">
            <property name="sessionFactory" ref="entityManagerFactory"></property>
        </bean>-->
        <bean class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
            <property name="entityManagerFactory" ref="entityManagerFactory"></property>
        </bean>
        <!--<bean class="com.w"-->
    </mvc:interceptors>


    <!--引入定时器任务-->
    <import resource="spring-quartz3.xml"/>
    <import resource="spring-quartzForDcsCache.xml"/>
    <import resource="spring-quartz-pipeData-checkAlarm.xml"/>
    <import resource="spring-quartzForDcsSendData.xml"/>


    <!-- ======================== 调度工厂 ======================== -->
    <bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger"/>
                <ref bean="dcsCacheTrigger"/>
                <!--<ref bean="dcsCheckAlarmTrigger"/>-->
                <ref bean="dcsSendDataTrigger"/>

            </list>
        </property>
        <property name="jobFactory" ref="jobFactory"></property>
    </bean>
</beans>